[
    {
        "id": "763721aa65f0471b",
        "type": "comment",
        "z": "706bdd3f3f20c07c",
        "name": "StableLM-3B-4E1T",
        "info": "",
        "x": 110,
        "y": 100,
        "wires": []
    },
    {
        "id": "1cef88336b25441a",
        "type": "http in",
        "z": "706bdd3f3f20c07c",
        "name": "[get] /stablelm",
        "url": "/stablelm",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 160,
        "wires": [
            [
                "080489d9af9281f0"
            ]
        ]
    },
    {
        "id": "f9aafb1df135391b",
        "type": "function",
        "z": "706bdd3f3f20c07c",
        "name": "StableLM",
        "func": "(async () => {\n  let Prompt = (msg.payload || '').trim()\n  if (Prompt === '') {\n    msg.payload = 'empty or missing prompt'\n    node.send([null, msg])\n    node.done()\n    return\n  }\n\n  /**** retrieve settings or provide defaults ****/\n\n  let Seed = parseInt(msg.seed, 10)\n  if (isNaN(Seed)) { Seed = -1 }\n\n  let Threads = parseInt(msg.threads, 10)\n  if (isNaN(Threads)) { Threads = 4 }\n  Threads = Math.max(1, Threads)\n  Threads = Math.min(Threads, Math.max(1, os.cpus().length))\n\n  let ContextLength = parseInt(msg.context, 10)\n  if (isNaN(ContextLength)) { ContextLength = 512 }\n  ContextLength = Math.max(0, Math.min(ContextLength, 4096))\n\n  let keep = parseInt(msg.keep, 10)\n  if (isNaN(keep)) { keep = 0 }\n  keep = Math.max(-1, Math.min(keep, ContextLength))\n\n  let PredictionLength = parseInt(msg.predict, 10)\n  if (isNaN(PredictionLength)) { PredictionLength = 128 }\n  PredictionLength = Math.max(1, Math.min(PredictionLength, ContextLength)) // no -1!\n\n  let topK = parseInt(msg.topk, 10)\n  if (isNaN(topK)) { topK = 40 }\n  topK = Math.max(1, Math.min(topK, 100))\n\n  let topP = parseFloat(msg.topp)\n  if (isNaN(topP)) { topP = 0.9 }\n  topP = Math.max(0.1, Math.min(topP, 1.0))\n\n  let Temperature = parseFloat(msg.temperature)\n  if (isNaN(Temperature)) { Temperature = 0.8 }\n  Temperature = Math.max(0.0, Math.min(Temperature, 1.0))\n\n  let Batches = parseInt(msg.batches, 10)\n  if (isNaN(Batches)) { Batches = 8 }\n  Batches = Math.max(1, Math.min(Batches, 100))\n\n  Prompt = Prompt.replace(/\"/g, '\\\\\"')\n\n  /**** retrieve UserDir - crash if not a folder ****/\n\n  let UserDir = (global.get('UserDir') || '').trim()\n  if (UserDir === '') { UserDir = process.env.HOME + '/.node-red' }\n\n  if (!fs.statSync(UserDir, { throwIfNoEntry: false })?.isDirectory()) {\n    throw new Error(\n      'the given \"UserDir\" (\"' + UserDir + '\") is either missing or ' +\n      'not a folder - exiting'\n    )\n  }\n\n  /**** combine all these settings into a command ****/\n\n  let Command = ('cd \"' + UserDir + '\" && ' +\n    './llama --model ./stablelm-3b-4e1t-Q8_0.bin --mlock ' +\n    ' --ctx_size ' + ContextLength + ' --keep ' + keep +\n    ' --n_predict ' + PredictionLength +\n    ' --threads ' + Threads + ' --batch_size ' + Batches +\n    ' --seed ' + Seed + ' --temp ' + Temperature +\n    ' --top_k ' + topK + ' --top_p ' + topP +\n    ' --reverse-prompt \"<|endoftext|>\"' +\n    ' --prompt \"' + Prompt + '\"'\n  )\n\n  /**** extract actual reponse from command output ****/\n\n  function ResponseFrom(Text) {\n    let HeaderLength = Text.indexOf('\\n\\n\\n')\n    Text = Text.slice(HeaderLength + 1)\n\n    let TrailerIndex = Text.indexOf('<|endoftext|>')\n    if (TrailerIndex < 0) {\n      TrailerIndex = Text.indexOf('\\nllama_print_timings')\n    }\n    Text = Text.slice(0, TrailerIndex)\n\n    return Text\n  }\n\n  /**** now infer a response from the given prompt ****/\n\n  let { stdout, stderr, StatusCode, Signal } = child_process.spawnSync(\n    'bash', [], { input: Command }\n  )\n\n  const $stdout = stdout.toString().trim()\n  const $stderr = stderr.toString().trim()\n\n  switch (true) {\n    case (StatusCode == null):\n    case (StatusCode === 0):\n      msg.statusCode = ($stdout === '' ? 204 : 200)\n      msg.payload = ResponseFrom($stdout)\n      break\n    default:\n      msg.statusCode = 500 + StatusCode\n      msg.payload = ($stdout === '' ? '' : '>>>> stdout >>>>\\n' + $stdout + '\\n') +\n        '>>>> stderr >>>>\\n' + $stderr +\n        (Signal == null ? '' : '\\n' + Signal)\n      break\n  }\n\n  node.send([msg, null])\n  node.done()\n})()\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "child_process",
                "module": "child_process"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "10ee081f81a9a211",
                "50138c7c51f06e4d"
            ],
            [
                "b566f55c47395bd8"
            ]
        ]
    },
    {
        "id": "d17c613210997c7a",
        "type": "debug",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'Prompt: \"' & msg.payload & '\"'",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 160,
        "y": 280,
        "wires": []
    },
    {
        "id": "c09620ac6309e6db",
        "type": "http response",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "b566f55c47395bd8",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "400",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "400",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "c09620ac6309e6db"
            ]
        ]
    },
    {
        "id": "10ee081f81a9a211",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "200",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "200",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 220,
        "wires": [
            [
                "c09620ac6309e6db"
            ]
        ]
    },
    {
        "id": "50138c7c51f06e4d",
        "type": "debug",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'Response: \"' & msg.payload & '\"'",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 300,
        "wires": []
    },
    {
        "id": "bf75b21f290f381f",
        "type": "comment",
        "z": "706bdd3f3f20c07c",
        "name": "cwd = UserDir",
        "info": "",
        "x": 510,
        "y": 100,
        "wires": []
    },
    {
        "id": "080489d9af9281f0",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "parse query",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.query.prompt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "seed",
                "pt": "msg",
                "to": "req.query.seed",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "threads",
                "pt": "msg",
                "to": "req.query.threads",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "predict",
                "pt": "msg",
                "to": "req.query.predict",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topk",
                "pt": "msg",
                "to": "req.query.topk",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topp",
                "pt": "msg",
                "to": "req.query.topp",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "req.query.temperature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "batches",
                "pt": "msg",
                "to": "req.query.batches",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "model",
                "pt": "msg",
                "to": "req.query.model",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "context",
                "pt": "msg",
                "to": "req.query.context",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "keep",
                "pt": "msg",
                "to": "req.query.keep",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 220,
        "wires": [
            [
                "f9aafb1df135391b",
                "d17c613210997c7a"
            ]
        ]
    }
]